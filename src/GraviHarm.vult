fun change(x:int):bool {
    mem pre_x;
    val v:bool = pre_x <> x;
    pre_x = x;
    return v;
}

fun edge(x:bool) : bool {
   mem pre;
   val ret = x && not(pre);
   pre = x;
   return ret;
}
fun counter(){
   mem count = count + 1;
   //bug fix for initial erratic behavior 
   if(count < 0 || count > 25)
      count = 0;
   return count;
}
and reset(){
   count = 0;
}

fun process(inNote:real,   inChord:real, inPlan: real, trigNote:real, trigChor:real, trigPlan:real, reset:real,  fs:real) {
 
   val pitchArr : array (real,625) = 
   [0.0,0.583333333,1.333333333,1.833333333,2.166666667,
   -0.583333333,0.0,0.75,1.25,1.583333333,-1.333333333,-0.75,0.0,0.5,0.833333333,
   -1.833333333,-1.25,-0.5,0.0,0.333333333,-2.166666667,-1.583333333,-0.833333333,
   -0.333333333,0.0,0.416666667,1.0,1.75,2.25,2.583333333,-0.166666667,0.416666667,
   1.166666667,1.666666667,2.0,-0.916666667,-0.333333333,0.416666667,0.916666667,1.25,
   -1.416666667,-0.833333333,-0.083333333,0.416666667,0.75,-1.75,-1.166666667,
   -0.416666667,0.083333333,0.416666667,-0.333333333,0.25,1.0,1.5,1.833333333,-0.916666667,
   -0.333333333,0.416666667,0.916666667,1.25,-1.666666667,-1.083333333,-0.333333333,0.166666667,
   0.5,-2.166666667,-1.583333333,-0.833333333,-0.333333333,0.0,-2.5,-1.916666667,-1.166666667,
   -0.666666667,-0.333333333,0.166666667,0.75,1.5,2.0,2.333333333,-0.416666667,0.166666667,
   0.916666667,1.416666667,1.75,-1.166666667,-0.583333333,0.166666667,0.666666667,1.0,-1.666666667,
   -1.083333333,-0.333333333,0.166666667,0.5,-2.0,-1.416666667,-0.666666667,-0.166666667,0.166666667,
   -0.166666667,0.416666667,1.166666667,1.666666667,2.0,-0.75,-0.166666667,0.583333333,1.083333333,
   1.416666667,-1.5,-0.916666667,-0.166666667,0.333333333,0.666666667,-2.0,-1.416666667,-0.666666667,
   -0.166666667,0.166666667,-2.333333333,-1.75,-1.0,-0.5,-0.166666667,0.416666667,1.0,1.75,2.25,
   2.583333333,-0.166666667,0.416666667,1.166666667,1.666666667,2.0,-0.916666667,-0.333333333,
   0.416666667,0.916666667,1.25,-1.416666667,-0.833333333,-0.083333333,0.416666667,0.75,-1.75,
   -1.166666667,-0.416666667,0.083333333,0.416666667,0.833333333,1.416666667,2.166666667,2.666666667,
   3.0,0.25,0.833333333,1.583333333,2.083333333,2.416666667,-0.5,0.083333333,0.833333333,1.333333333,
   1.666666667,-1.0,-0.416666667,0.333333333,0.833333333,1.166666667,-1.333333333,-0.75,0.0,0.5,0.833333333,
   0.083333333,0.666666667,1.416666667,1.916666667,2.25,-0.5,0.083333333,0.833333333,1.333333333,1.666666667,
   -1.25,-0.666666667,0.083333333,0.583333333,0.916666667,-1.75,-1.166666667,-0.416666667,0.083333333,0.416666667,
   -2.083333333,-1.5,-0.75,-0.25,0.083333333,0.583333333,1.166666667,1.916666667,2.416666667,2.75,0.0,
   0.583333333,1.333333333,1.833333333,2.166666667,-0.75,-0.166666667,0.583333333,1.083333333,1.416666667,
   -1.25,-0.666666667,0.083333333,0.583333333,0.916666667,-1.583333333,-1.0,-0.25,0.25,0.583333333,0.25,
   0.833333333,1.583333333,2.083333333,2.416666667,-0.333333333,0.25,1.0,1.5,1.833333333,-1.083333333,
   -0.5,0.25,0.75,1.083333333,-1.583333333,-1.0,-0.25,0.25,0.583333333,-1.916666667,-1.333333333,-0.583333333,
   -0.083333333,0.25,-0.333333333,0.25,1.0,1.5,1.833333333,-0.916666667,-0.333333333,0.416666667,0.916666667,
   1.25,-1.666666667,-1.083333333,-0.333333333,0.166666667,0.5,-2.166666667,-1.583333333,-0.833333333,
   -0.333333333,0.0,-2.5,-1.916666667,-1.166666667,-0.666666667,-0.333333333,0.083333333,0.666666667,
   1.416666667,1.916666667,2.25,-0.5,0.083333333,0.833333333,1.333333333,1.666666667,-1.25,
   -0.666666667,0.083333333,0.583333333,0.916666667,-1.75,-1.166666667,-0.416666667,0.083333333,0.416666667,
   -2.083333333,-1.5,-0.75,-0.25,0.083333333,-0.666666667,-0.083333333,0.666666667,1.166666667,1.5,-1.25,
   -0.666666667,0.083333333,0.583333333,0.916666667,-2.0,-1.416666667,-0.666666667,-0.166666667,0.166666667,
   -2.5,-1.916666667,-1.166666667,-0.666666667,-0.333333333,-2.833333333,-2.25,-1.5,-1.0,-0.666666667,
   -0.166666667,0.416666667,1.166666667,1.666666667,2.0,-0.75,-0.166666667,0.583333333,1.083333333,1.416666667,
   -1.5,-0.916666667,-0.166666667,0.333333333,0.666666667,-2.0,-1.416666667,-0.666666667,-0.166666667,0.166666667,
   -2.333333333,-1.75,-1.0,-0.5,-0.166666667,-0.5,0.083333333,0.833333333,1.333333333,1.666666667,-1.083333333,
   -0.5,0.25,0.75,1.083333333,-1.833333333,-1.25,-0.5,0.0,0.333333333,-2.333333333,-1.75,-1.0,-0.5,-0.166666667,
   -2.666666667,-2.083333333,-1.333333333,-0.833333333,-0.5,0.166666667,0.75,1.5,2.0,2.333333333,-0.416666667,
   0.166666667,0.916666667,1.416666667,1.75,-1.166666667,-0.583333333,0.166666667,0.666666667,1.0,-1.666666667,
   -1.083333333,-0.333333333,0.166666667,0.5,-2.0,-1.416666667,-0.666666667,-0.166666667,0.166666667,0.583333333,
   1.166666667,1.916666667,2.416666667,2.75,0.0,0.583333333,1.333333333,1.833333333,2.166666667,-0.75,-0.166666667,
   0.583333333,1.083333333,1.416666667,-1.25,-0.666666667,0.083333333,0.583333333,0.916666667,-1.583333333,
   -1.0,-0.25,0.25,0.583333333,-0.166666667,0.416666667,1.166666667,1.666666667,2.0,-0.75,-0.166666667,
   0.583333333,1.083333333,1.416666667,-1.5,-0.916666667,-0.166666667,0.333333333,0.666666667,-2.0,-1.416666667,
   -0.666666667,-0.166666667,0.166666667,-2.333333333,-1.75,-1.0,-0.5,-0.166666667,0.333333333,0.916666667,1.666666667,
   2.166666667,2.5,-0.25,0.333333333,1.083333333,1.583333333,1.916666667,-1.0,-0.416666667,0.333333333,0.833333333,
   1.166666667,-1.5,-0.916666667,-0.166666667,0.333333333,0.666666667,-1.833333333,-1.25,-0.5,0.0,0.333333333,0.0,
   0.583333333,1.333333333,1.833333333,2.166666667,-0.583333333,0.0,0.75,1.25,1.583333333,-1.333333333,-0.75,0.0,0.5,
   0.833333333,-1.833333333,-1.25,-0.5,0.0,0.333333333,-2.166666667,-1.583333333,-0.833333333,-0.333333333,0.0,-0.166666667,
   0.416666667,1.166666667,1.666666667,2.0,-0.75,-0.166666667,0.583333333,1.083333333,1.416666667,-1.5,-0.916666667,-0.166666667,
   0.333333333,0.666666667,-2.0,-1.416666667,-0.666666667,-0.166666667,0.166666667,-2.333333333,-1.75,-1.0,-0.5,-0.166666667,0.25,
   0.833333333,1.583333333,2.083333333,2.416666667,-0.333333333,0.25,1.0,1.5,1.833333333,-1.083333333,-0.5,0.25,0.75,1.083333333,
   -1.583333333,-1.0,-0.25,0.25,0.583333333,-1.916666667,-1.333333333,-0.583333333,-0.083333333,0.25,-0.5,0.083333333,0.833333333,
   1.333333333,1.666666667,-1.083333333,-0.5,0.25,0.75,1.083333333,-1.833333333,-1.25,-0.5,0.0,0.333333333,-2.333333333,-1.75,-1.0,
   -0.5,-0.166666667,-2.666666667,-2.083333333,-1.333333333,-0.833333333,-0.5,0.0,0.583333333,1.333333333,1.833333333,2.166666667,
   -0.583333333,0.0,0.75,1.25,1.583333333,-1.333333333,-0.75,0.0,0.5,0.833333333,-1.833333333,-1.25,-0.5,0.0,0.333333333,-2.166666667,
   -1.583333333,-0.833333333,-0.333333333,0.0,-0.333333333,0.25,1.0,1.5,1.833333333,-0.916666667,-0.333333333,0.416666667,0.916666667,
   1.25,-1.666666667,-1.083333333,-0.333333333,0.166666667,0.5,-2.166666667,-1.583333333,-0.833333333,-0.333333333,0.0,-2.5,-1.916666667,
   -1.166666667,-0.666666667,-0.333333333
];
   mem noteLevel:real;
   mem chordLevel:real;
   mem planeLevel:real;
   mem countNote:int;
   mem countChor:int;
   mem countPlan:int;
   mem knobNote:int;
   mem knobChor:int;
   mem knobPlan:int;
   mem knobOcta:int;

   if(edge(trigNote > 0.0))
      countNote = note:counter();
   if(edge(trigChor > 0.0))
      countChor = chor:counter();
   if(edge(trigPlan > 0.0))
      countPlan = plan:counter();
   if(change(knobNote))
      countNote = 0;
   if(change(knobChor))
      countChor = 0;
   if(change(knobPlan))
      countPlan = 0;

   if(edge(reset > 0.0) ){
      _ = note:reset();
      countNote = note:counter();
      _ = chor:reset();
      countChor = chor:counter();
      _ = plan:reset();
      countPlan = plan:counter();
   }


   val voct;
   val noteInp = int(inNote * 4.0);
   val chorInp = int(inChord * 4.0);
   val planInp = int(inPlan * 24.0);
   val indNote = (countNote + knobNote + noteInp) % 5;
   val indChor = (countChor + knobChor + chorInp) % 5;
   val indPlan = (countPlan + knobPlan + planInp) % 25;

   val index : int = int(indNote  + indChor * 5 + indPlan * 25 );

   voct = pitchArr[index] + real(knobOcta);
   //out1 = trigChor;
   return voct, indNote, indChor, countPlan;
}
and setKnobNote(knob:int){
   knobNote = knob;
}
and setKnobChor(knob:int){
   knobChor = knob;
}
and setKnobPlan(knob:int){
   knobPlan = knob;
}
and setKnobOcta(knob:int){
   knobOcta = knob;
}
and default()@[init]{
   noteLevel = 0.0;
   chordLevel = 0.0;
   planeLevel = 0.0;
   countNote = 0;
   countChor = 0;
   countPlan = 0;
   knobPlan = 0;
   knobChor = 0;
   knobPlan = 0;
   knobOcta = 0;

}




