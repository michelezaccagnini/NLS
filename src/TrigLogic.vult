fun direction(x):int{
    mem pre;
    val dir = x - pre;
    val ret = if dir > 0.0 then 1 else if dir < 0.0 then -1 else 0;
    pre = x;
    return ret;
}
fun sign(x):int{
    val ret = if x > 0.0 then 1 else if x < 0.0 then -1 else 0;
    return ret;
}

fun logic(x1, x2, type1, type2, s1, s2, andOr):bool{
    val res1:bool;
    val res2:bool; 
    val tmp1:int;
    val tmp2:int;
    tmp1 = if type1 then direction(x1) else sign(x1);
    tmp2 = if type2 then direction(x2) else sign(x2);
    res1 = s1==tmp1;
    res2 = s2==tmp2;
    val ret = if andOr then (res1 && res2) else (res1 || res2);
    return ret; 
}



fun process(trig, lfo1, lfo2){
    mem type1:bool;
    mem type2:bool;
    mem s1:int;
    mem s2:int;
    mem andOr:bool;
    mem inv:bool;
    val l = logic(lfo1, lfo2, type1, type2, s1, s2, andOr);
    val ret1 = if l then trig else 0.0;
    val ret2 = if not(l) then trig else 0.0;
    //ret1 = if direction(lfo1) then 1.0 else 0.0; 
    //ret2 = if direction(lfo2) then 1.0 else 0.0; 
    return  ret1, ret2;
}
and setType1(value){
    type1 = value > 0.0;
}
and setType2(value){
    type2 = value > 0.0;
}
and setS1(value:int){
    s1 = value;
}
and setS2(value:int){
    s2 = value;
}
and setAndOr(value){
    andOr = value > 0.0;
}
and setInv(value){
    inv = value > 0.0;
}
and default(){
    mem type1 = true;
    mem type2 = true;
    mem s1 = 1;
    mem s2 = 1;
    mem andOr = true;
    mem inv = false;
    mem pre = 0.0;
}